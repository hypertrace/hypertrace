## This does everything you need to get a hypertracing system started.
## You can connect to the UI at port 2020 and send data to it on any supported tracing solution.
## Note: Our stack is dependent on pinot and it is a cpu heavy during startup. 
## The depends_on has a max wait time of 1 min, so if you don't have enough resources, you may have to re-run the same command. 
## we are looking at improving this.
version: '2.4'
services:

# Frontend Services

  # Serves GraphQL and gRPC requests that cross different backends like Pinot and Mongo
  hypertrace-federated-service:
    image: hypertrace/hypertrace-federated-service
    container_name: hypertrace-federated-service
    environment:
      - MONGO_HOST=mongo
      - ZK_CONNECT_STR=zookeeper:2181/hypertrace-views
    ports:
      - 2020:2020
    healthcheck:
      start_period: 20s
    depends_on:
      mongo:
        condition: service_healthy
      kafka-zookeeper:
        condition: service_healthy
      pinot:
        # note : To work successfully, it needs pinot to be healthy. This has started parallel for
        # startup experience.
        condition: service_started

# Ingestion pipeline

  # Collects spans in different trace formats like Jaeger, Zipkin, etc
  hypertrace-collector:
    image: hypertrace/hypertrace-oc-collector
    container_name: hypertrace-collector
    command: ["--config=/config/collector-config.yaml"]
    ports:
      - 14268:14268 # Jaeger Thrift
      - 14267:14267 # Jaeger HTTP
      - 9411:9411 # Zipkin HTTP
    networks:
      default:
        # Allows sample apps to connect with platform-specific hostnames
        aliases:
          - jaeger
          - jaeger-collector
          - zipkin
    depends_on:
      kafka-zookeeper:
        condition: service_healthy
  # Converts and normalizes incoming spans into Hypertrace format
  span-normalizer:
    image: hypertrace/span-normalizer
    container_name: span-normalizer
    environment:
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DEFAULT_TENANT_ID=__default
    depends_on:
      schema-registry:
        condition: service_healthy
      kafka-zookeeper:
        condition: service_healthy
  # Groups raw spans into traces based on a time interval
  raw-spans-grouper:
    image: hypertrace/raw-spans-grouper
    container_name: raw-spans-grouper
    environment:
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPAN_GROUPBY_SESSION_WINDOW_INTERVAL=10
    depends_on:
      schema-registry:
        condition: service_healthy
      kafka-zookeeper:
        condition: service_healthy
  # Enriches traces with entity information like API, service and backend.
  hypertrace-trace-enricher:
    image: hypertrace/hypertrace-trace-enricher
    container_name: hypertrace-trace-enricher
    environment:
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ENTITY_SERVICE_HOST_CONFIG=hypertrace-federated-service
      - ENTITY_SERVICE_PORT_CONFIG=9001
      - KAFKA_SINK_TOPIC=enriched-structured-traces
    depends_on:
      kafka-zookeeper:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      hypertrace-federated-service:
        condition: service_started
  # materialize enriched traces into pinot views
  all-views-generator:
    image: hypertrace/hypertrace-view-generator
    container_name: all-views-generator
    environment:
      # TODO: maintain uniformity. service names should be aligned with container names.
      - SERVICE_NAME=all-views
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      kafka-zookeeper:
        condition: service_healthy
      schema-registry:
        condition: service_healthy

# One time startup jobs:

  # Creates require views in pinot like spanEventView, backendEntityView, etc
  all-views-creator:
    image: hypertrace/hypertrace-view-creator
    container_name: all-views-creator
    environment:
      - SERVICE_NAME=all-views
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - ZK_CONNECT_STR=zookeeper:2181
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # todo : we are in process of making them as part of default.
      - PINOT_BROKER_TAG=DefaultTenant
      - PINOT_SERVER_TAG=DefaultTenant
    volumes: &default-scripts
      # These scripts are temporary, allowing a temporary override the ENTRYPOINT with a blocking barrier.
      # Unlike service_started condition, these barriers can be longer than a minute. These are temporary
      # because they shadow the ENTRYPOINT, duplicate and ignore the more robust HEALTHCHECK
      # feature available in commands like docker ps.
      #
      # TODO: Remove this after startup improvement fixes
      - ./scripts/wait-for-it.sh:/usr/local/bin/wait-for-it.sh:ro
      - ./scripts/start-platform.sh:/usr/local/bin/start-platform.sh:ro
      - ./scripts/start-bootstrapper.sh:/usr/local/bin/start-bootstrapper.sh:ro
    # TODO: Remove this after startup improvement fixes
    entrypoint: ["wait-for-it.sh", "-h", "pinot", "-p", "8097", "--timeout=180",
                 "--" ,
                 "start-platform.sh"]
    depends_on:
      pinot:
        # note : To work successfully, it needs pinot to be healthy. This has started parallel for
        # startup experience.
        condition: service_started

  # Creates require attributes into mongo like entity type, its relationship, etc
  config-bootstrapper:
    image: hypertrace/config-bootstrapper
    container_name: attributes-bootstrapper
    environment:
      - SERVICE_NAME=config-bootstrapper
      - ATTRIBUTE_SERVICE_HOST_CONFIG=hypertrace-federated-service
      - ATTRIBUTE_SERVICE_PORT_CONFIG=9001
      - ENTITY_SERVICE_HOST_CONFIG=hypertrace-federated-service
      - ENTITY_SERVICE_PORT_CONFIG=9001
      - MONGO_HOST=mongo
    volumes: *default-scripts
    # TODO: Remove this after startup improvement fixes
    entrypoint: ["wait-for-it.sh", "-h", "hypertrace-federated-service", "-p", "9002", "--timeout=120",
                 "--" ,
                 "start-bootstrapper.sh"]
    depends_on:
      mongo:
        condition: service_healthy
      hypertrace-federated-service:
        # note : To work successfully, it needs hypertrace-federated-service to be healthy.
        # This has started parallel for startup experience.
        condition: service_started

# Third-party data services:

  # Kafka is used for streaming functionality.
  # ZooKeeper is required by Kafka and Pinot
  kafka-zookeeper:
    image: hypertrace/kafka-zookeeper:0.1.4
    container_name: kafka-zookeeper
    # todo : we will move this to docker image
    healthcheck:
      test: nc -z localhost 9092 && echo ruok | nc localhost 2181
      interval: 2s
      timeout: 1s
    networks:
      default:
        # prevents apps from having to use the hostname kafka-zookeeper
        aliases:
          - kafka
          - zookeeper
  # Stores entities like API, service and backend
  mongo:
    # Uses less huge MongoDB dist until/unless we make our own
    image: mvertes/alpine-mongo
    container_name: mongo
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 2s
      retries: 3
  # Stores spans and traces and provides aggregation functions
  pinot:
    image: hypertrace/pinot-servicemanager:0.1.3
    container_name: pinot
    environment:
      - JAVA_OPTS=-Xms256M -Xmx512M -XX:MaxDirectMemorySize=96M -XX:+ExitOnOutOfMemoryError
    networks:
      default:
        # Usually, Pinot is distributed, and clients connect to the controller
        aliases:
          - pinot-controller
    cpu_shares: 2048
    # TODO: move health check to dockerfile
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8097"]
      interval: 1s
      timeout: 1s
      retries: 15
      start_period: 45s
    command: StartServiceManager -clusterName hypertrace-views  -zkAddress zookeeper:2181 -port 7098 -bootstrapConfigPaths /opt/pinot/etc/pinot-controller.conf /opt/pinot/etc/pinot-broker.conf /opt/pinot/etc/pinot-server.conf
    depends_on:
      kafka-zookeeper:
        condition: service_healthy
  # Hypertrace formats are defined in Avro. This helps maintain version compatibility.
  schema-registry:
    image: hypertrace/schema-registry:0.1.2
    container_name: schema-registry
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_KAFKASTORE_GROUP_ID: hypertrace-schema-registry
      SCHEMA_REGISTRY_MASTER_ELIGIBILITY: "true"
      SCHEMA_REGISTRY_AVRO_COMPATIBILITY_LEVEL: full_transitive
    depends_on:
      kafka-zookeeper:
        condition: service_healthy
    # todo: move health check to dockerfile
    healthcheck:
      test: wget -qO- http://127.0.0.1:8081 &> /dev/null || exit 1
      interval: 2s
      timeout: 1s
      retries: 8
      start_period: 20s
