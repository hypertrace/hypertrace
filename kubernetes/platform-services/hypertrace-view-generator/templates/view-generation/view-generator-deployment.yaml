{{ $global := . }}
{{- range $k, $group := .Values.viewGeneratorGroups }}
{{- if $group.enabled}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $group.generator.deploymentName }}
  labels:
    release: {{ $global.Release.Name }}
spec:
  replicas: {{ $group.generator.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ $global.Values.maxUnavailable }}
  selector:
    matchLabels:
      {{- toYaml $group.generator.deploymentSelectorMatchLabels | nindent 6 }}
  template:
    metadata:
      labels:
        {{- toYaml $group.generator.podLabels | nindent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ $global.Values.containerAdminPort }}"
    spec:
    {{- with $global.Values.imagePullSecrets }}
      imagePullSecrets:
    {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - name: view-gen-service-config
          configMap:
            name: {{ $group.generator.serviceConfig.name }}
        - name: log4j-config
          configMap:
            name: {{ $global.Values.logConfig.name }}
      {{- with $global.Values.nodeLabels }}
      nodeSelector:
      {{- toYaml . | nindent 8}}
      {{- end }}
      containers:
        - name: {{ $group.generator.deploymentName }}
          image: "{{ include "generatorservice.image" $global }}"
          imagePullPolicy: {{ $global.Values.images.pullPolicy }}
          ports:
            - name: admin-port
              containerPort: {{ $global.Values.containerAdminPort }}
              protocol: TCP
          env:
            - name: SERVICE_NAME
              value: "all-views"
            - name: CLUSTER_NAME
              value: "staging"
            - name: BOOTSTRAP_CONFIG_URI
              value: "file:///app/resources/configs"
          volumeMounts:
            - name: view-gen-service-config
              mountPath: /app/resources/configs/common/staging/application.conf
              subPath: application.conf
            - name: log4j-config
              mountPath: /var/{{ $group.generator.deploymentName }}/log
          livenessProbe:
            initialDelaySeconds: {{ int $group.generator.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ int $group.generator.livenessProbe.periodSeconds }}
            tcpSocket:
              port: admin-port
          readinessProbe:
            initialDelaySeconds: {{ int $group.generator.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ int $group.generator.readinessProbe.periodSeconds }}
            httpGet:
              path: /health
              port: {{ $global.Values.containerAdminPort }}
          resources:
            {{- toYaml $group.generator.resources | nindent 12 }}
{{- end }}
{{- end }}